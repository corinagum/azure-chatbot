//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatBotNewDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LeapChatBotDBEntities : DbContext
    {
        public LeapChatBotDBEntities()
            : base("name=LeapChatBotDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ErrorCode> ErrorCode { get; set; }
        public virtual DbSet<Intent> Intent { get; set; }
        public virtual DbSet<Node> Node { get; set; }
        public virtual DbSet<Reference> Reference { get; set; }
    
        public virtual int AddErrorCode(string errorCode)
        {
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("ErrorCode", errorCode) :
                new ObjectParameter("ErrorCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddErrorCode", errorCodeParameter);
        }
    
        public virtual int AddIntent(string intentName)
        {
            var intentNameParameter = intentName != null ?
                new ObjectParameter("IntentName", intentName) :
                new ObjectParameter("IntentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddIntent", intentNameParameter);
        }
    
        public virtual int AddNode(string question, string answer, Nullable<int> previousID, Nullable<int> newID, Nullable<int> intentID, Nullable<int> errorcodeID)
        {
            var questionParameter = question != null ?
                new ObjectParameter("Question", question) :
                new ObjectParameter("Question", typeof(string));
    
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            var previousIDParameter = previousID.HasValue ?
                new ObjectParameter("PreviousID", previousID) :
                new ObjectParameter("PreviousID", typeof(int));
    
            var newIDParameter = newID.HasValue ?
                new ObjectParameter("NewID", newID) :
                new ObjectParameter("NewID", typeof(int));
    
            var intentIDParameter = intentID.HasValue ?
                new ObjectParameter("IntentID", intentID) :
                new ObjectParameter("IntentID", typeof(int));
    
            var errorcodeIDParameter = errorcodeID.HasValue ?
                new ObjectParameter("ErrorcodeID", errorcodeID) :
                new ObjectParameter("ErrorcodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNode", questionParameter, answerParameter, previousIDParameter, newIDParameter, intentIDParameter, errorcodeIDParameter);
        }
    
        public virtual int AddReference(Nullable<int> previousID, Nullable<int> newID)
        {
            var previousIDParameter = previousID.HasValue ?
                new ObjectParameter("PreviousID", previousID) :
                new ObjectParameter("PreviousID", typeof(int));
    
            var newIDParameter = newID.HasValue ?
                new ObjectParameter("NewID", newID) :
                new ObjectParameter("NewID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReference", previousIDParameter, newIDParameter);
        }
    
        public virtual ObjectResult<GetAllConnectedNodes_Result> GetAllConnectedNodes(Nullable<int> previousID)
        {
            var previousIDParameter = previousID.HasValue ?
                new ObjectParameter("PreviousID", previousID) :
                new ObjectParameter("PreviousID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllConnectedNodes_Result>("GetAllConnectedNodes", previousIDParameter);
        }
    
        public virtual ObjectResult<GetNodeByErrorCode_Result> GetNodeByErrorCode(string errorMessage)
        {
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNodeByErrorCode_Result>("GetNodeByErrorCode", errorMessageParameter);
        }
    
        public virtual ObjectResult<GetNodeByIntent_Result> GetNodeByIntent(string intentName)
        {
            var intentNameParameter = intentName != null ?
                new ObjectParameter("IntentName", intentName) :
                new ObjectParameter("IntentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNodeByIntent_Result>("GetNodeByIntent", intentNameParameter);
        }
    
        public virtual ObjectResult<GetNodeWithAnswer_Result> GetNodeWithAnswer(string answer)
        {
            var answerParameter = answer != null ?
                new ObjectParameter("Answer", answer) :
                new ObjectParameter("Answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNodeWithAnswer_Result>("GetNodeWithAnswer", answerParameter);
        }
    
        public virtual ObjectResult<GetRoot_Result> GetRoot()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoot_Result>("GetRoot");
        }
    
        public virtual int UpdateNodeWithErrorCode(Nullable<int> nodeID, Nullable<int> errorcodeID)
        {
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var errorcodeIDParameter = errorcodeID.HasValue ?
                new ObjectParameter("ErrorcodeID", errorcodeID) :
                new ObjectParameter("ErrorcodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNodeWithErrorCode", nodeIDParameter, errorcodeIDParameter);
        }
    
        public virtual int UpdateNodeWithIntent(Nullable<int> nodeID, Nullable<int> intentID)
        {
            var nodeIDParameter = nodeID.HasValue ?
                new ObjectParameter("NodeID", nodeID) :
                new ObjectParameter("NodeID", typeof(int));
    
            var intentIDParameter = intentID.HasValue ?
                new ObjectParameter("IntentID", intentID) :
                new ObjectParameter("IntentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNodeWithIntent", nodeIDParameter, intentIDParameter);
        }
    }
}
